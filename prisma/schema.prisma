// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  imageUrl      String
  invoices      Invoice[]
   createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Status {
  pending
  paid
}

model Invoice {
  id            String    @id @default(cuid())
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id]) 
  amount        Float
  status        Status @default(pending)
   createdAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Revenue {
  id          String      @id     @default(cuid())
  month       String
  revenue     Float
}